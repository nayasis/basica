package io.nayasis.basica.file;import io.nayasis.basica.base.Classes;import io.nayasis.basica.base.Strings;import io.nayasis.basica.exception.unchecked.UncheckedClassNotFoundException;import io.nayasis.basica.exception.unchecked.UncheckedFileNotFoundException;import io.nayasis.basica.exception.unchecked.UncheckedIOException;import io.nayasis.basica.exception.unchecked.UncheckedMalformedUrlException;import io.nayasis.basica.file.handler.FileFinder;import io.nayasis.basica.file.handler.ZipFileHandler;import io.nayasis.basica.file.worker.BufferWriter;import io.nayasis.basica.file.worker.LineReader;import io.nayasis.basica.model.NList;import lombok.experimental.UtilityClass;import org.mozilla.universalchardet.UniversalDetector;import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.ObjectInput;import java.io.ObjectInputStream;import java.io.ObjectOutput;import java.io.ObjectOutputStream;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.net.MalformedURLException;import java.net.URL;import java.nio.charset.Charset;import java.nio.charset.StandardCharsets;import java.nio.file.CopyOption;import java.nio.file.FileVisitOption;import java.nio.file.FileVisitResult;import java.nio.file.InvalidPathException;import java.nio.file.LinkOption;import java.nio.file.Path;import java.nio.file.Paths;import java.nio.file.SimpleFileVisitor;import java.nio.file.StandardCopyOption;import java.nio.file.attribute.BasicFileAttributes;import java.util.ArrayList;import java.util.EnumSet;import java.util.List;import java.util.stream.Stream;import java.util.zip.GZIPInputStream;import java.util.zip.GZIPOutputStream;/** * File Utility * * @author nayasis@gmail.com * */@UtilityClasspublic class Files {    public static final String FOLDER_SEPARATOR         = "/";    public static final String FOLDER_SEPARATOR_WINDOWS = "\\";    private static final String UTF_8                    = StandardCharsets.UTF_8.toString();    private static final String CHARSET_AUTO_DETECT      = "";    private static final String REGEX_SEPARATOR_MULTIPLE = "(?!^)" + FOLDER_SEPARATOR + "+";    private static final String REGEX_SEPARATOR_LAST     = "(.+)" + FOLDER_SEPARATOR + "$";    /**     * Delete file or directory     *     * @param filePath  file path or directory path     * @throws UncheckedIOException  if an I/O error occurs     */	public void delete( Path filePath ) throws UncheckedIOException {		if( filePath == null || notExists( filePath ) ) return;		try {            if( isDirectory(filePath) ) {                java.nio.file.Files.walkFileTree( filePath, new SimpleFileVisitor<Path>() {                    @Override                    public FileVisitResult visitFile( Path file, BasicFileAttributes attributes ) throws IOException {                        java.nio.file.Files.delete(file);                        return FileVisitResult.CONTINUE;                    }                    @Override                    public FileVisitResult visitFileFailed( Path file, IOException e ) throws IOException {                        java.nio.file.Files.delete(file);                        return FileVisitResult.CONTINUE;                    }                    @Override                    public FileVisitResult postVisitDirectory( Path dir, IOException e ) throws IOException {                        if ( e != null) throw e;                        java.nio.file.Files.delete( dir );                        return FileVisitResult.CONTINUE;                    }                });            } else {                java.nio.file.Files.delete( filePath );            }        } catch( IOException e ) {        	throw new UncheckedIOException( e );        }	}    /**     * Delete file or directory     *     * @param filePath  file path or directory path     * @throws UncheckedIOException  if an I/O error occurs     */    public void delete( String filePath ) throws UncheckedIOException {        if( filePath == null ) return;    	delete( Paths.get(filePath) );    }    /**     * Delete file or directory     *     * @param filePath  file or directory path     * @throws UncheckedIOException  if an I/O error occurs     */    public void delete( File filePath ) throws UncheckedIOException {        if( filePath == null ) return;        delete( filePath.toPath() );    }    /**     * Get file extension     *     * @param filePath  file name or full path     * @return file extension     */    public String getExtension( String filePath ) {        if( Strings.isEmpty(filePath) ) return "";        int index = filePath.lastIndexOf( '.' );        if( index < 0 ) return "";        String ext = filePath.substring( index + 1 );        if( ext.contains(File.pathSeparator) || ext.contains(FOLDER_SEPARATOR) ) return "";        return ext;    }    public String getName( String filePath ) {        if( Strings.isEmpty(filePath) ) return "";        int index = filePath.lastIndexOf( File.pathSeparator );        if( index < 0 )            index = filePath.lastIndexOf( FOLDER_SEPARATOR );        if( index < 0 ) return filePath;        return filePath.substring( index + 1 );    }    /**     * Get file extension     *     * @param file  file     * @return file extension     */    public String getExtension( File file ) {    	return ( file == null ) ? "" : getExtension( file.getName() );    }    /**     * Get file extention     *     * @param path  path     * @return file extension     */    public String getExtension( Path path ) {        return ( path == null ) ? "" : getExtension( path.getFileName().toString() );    }    /**     * normalize file separator to "/" and remove last "/" separator.     *     * <pre>     *     Files.normalizeSeparator( "c:\\document/a/b\\c" );     *       -&gt; "c:/document/a/b/c"     * </pre>     *     * @param filePath  file path     * @return file path having "/" separator only.     */    public String normalizeSeparator( String filePath ) {        return normalizeSeparator( filePath, true );    }    /**     * normalize file separator to "/" and remove last "/" separator.     *     * <pre>     *     Files.normalizeSeparator( "c:\\document/a/b\\c" );     *       -&gt; "c:/document/a/b/c"     * </pre>     *     * @param filePath              file path     * @param removeLastSeparator   switch to remove last separator in file path     * @return file path having "/" separator only.     */    public String normalizeSeparator( String filePath, boolean removeLastSeparator ) {        String path = Strings.nvl(filePath).trim()            .replace( FOLDER_SEPARATOR_WINDOWS, FOLDER_SEPARATOR )            .replaceAll( REGEX_SEPARATOR_MULTIPLE, FOLDER_SEPARATOR );        if( removeLastSeparator )            path = path.replaceFirst( REGEX_SEPARATOR_LAST, "$1" );        return path;    }    /**     * normalize file separator to "/" and remove last "/" separator.     *     * <pre>     *     Files.normalizeSeparator( "c:\\document/a/b\\c" );     *       -&gt; "c:/document/a/b/c"     * </pre>     *     * @param filePath  file path     * @return file path having "/" separator only.     */    public String normalizeSeparator( Path filePath ) {        return normalizeSeparator( filePath, true );    }    /**     * normalize file separator to "/" and remove last "/" separator.     *     * <pre>     *     Files.normalizeSeparator( "c:\\document/a/b\\c" );     *       -&gt; "c:/document/a/b/c"     * </pre>     *     * @param filePath              file path     * @param removeLastSeparator   switch to remove last separator in file path     * @return file path having "/" separator only.     */    public String normalizeSeparator( Path filePath, boolean removeLastSeparator ) {        if( filePath == null ) return "";        return normalizeSeparator( filePath.toString(), removeLastSeparator );    }    /**     * Search list of files or directories in sub directory.     *     *     * @param searchDir         root directory to search     * @param includeFile       include file     * @param includeDirectory  include directory     * @param scanDepth         depth to scan     * <pre>     *   -1 : infinite     *    0 : in searchDir itself     *    1 : from searchDir to 1 depth sub directory     *    2 : from searchDir to 2 depth sub directory     *    ...     * </pre>     * @param matchingPattern   path matching pattern (glob expression. if not exists, add all result)     * <pre>     * ** : ignore directory variation     * *  : filename LIKE search     *     * 1. **.xml           : all files having "xml" extension below searchDir and it's all sub directories.     * 2. *.xml            : all files having "xml" extension in searchDir     * 3. c:\home\*\*.xml  : all files having "xml" extension below 'c:\home\' and it's just 1 depth below directories.     * 4. c:\home\**\*.xml : all files having "xml" extension below 'c:\home\' and it's all sub directories.     *     * 1. *  It matches zero , one or more than one characters. While matching, it will not cross directories boundaries.     * 2. ** It does the same as * but it crosses the directory boundaries.     * 3. ?  It matches only one character for the given name.     * 4. \  It helps to avoid characters to be interpreted as special characters.     * 5. [] In a set of characters, only single character is matched. If (-) hyphen is used then, it matches a range of characters. Example: [efg] matches "e","f" or "g" . [a-d] matches a range from a to d.     * 6. {} It helps to matches the group of sub patterns.     *     * 1. *.java when given path is java , we will get true by PathMatcher.matches(path).     * 2. *.* if file contains a dot, pattern will be matched.     * 3. *.{java,txt} If file is either java or txt, path will be matched.     * 4. abc.? matches a file which start with abc and it has extension with only single character.     *     * </pre>     *     * @return list of files or directories     * @throws UncheckedIOException  if an I/O error occurs     */    public List<Path> find( String searchDir, boolean includeFile, boolean includeDirectory, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        searchDir = Strings.trim( searchDir );        if( Strings.isEmpty( searchDir ) ) return new ArrayList<>();        return find( Paths.get( searchDir ), includeFile, includeDirectory, scanDepth, matchingPattern ) ;    }    /**     * Search list of files or directories in sub directory.     *     *     * @param searchDir         root directory to search     * @param includeFile       include file     * @param includeDirectory  include directory     * @param scanDepth         depth to scan     * <pre>     *   -1 : infinite     *    0 : in searchDir itself     *    1 : from searchDir to 1 depth sub directory     *    2 : from searchDir to 2 depth sub directory     *    ...     * </pre>     * @param matchingPattern   path matching pattern (glob expression. if not exists, add all result)     * <pre>     * ** : ignore directory variation     * *  : filename LIKE search     *     * 1. **.xml           : all files having "xml" extension below searchDir and it's all sub directories.     * 2. *.xml            : all files having "xml" extension in searchDir     * 3. c:\home\*\*.xml  : all files having "xml" extension below 'c:\home\' and it's just 1 depth below directories.     * 4. c:\home\**\*.xml : all files having "xml" extension below 'c:\home\' and it's all sub directories.     *     * 1. *  It matches zero , one or more than one characters. While matching, it will not cross directories boundaries.     * 2. ** It does the same as * but it crosses the directory boundaries.     * 3. ?  It matches only one character for the given name.     * 4. \  It helps to avoid characters to be interpreted as special characters.     * 5. [] In a set of characters, only single character is matched. If (-) hyphen is used then, it matches a range of characters. Example: [efg] matches "e","f" or "g" . [a-d] matches a range from a to d.     * 6. {} It helps to matches the group of sub patterns.     *     * 1. *.java when given path is java , we will get true by PathMatcher.matches(path).     * 2. *.* if file contains a dot, pattern will be matched.     * 3. *.{java,txt} If file is either java or txt, path will be matched.     * 4. abc.? matches a file which start with abc and it has extension with only single character.     * </pre>     *     * @return list of files or directories     * @throws UncheckedIOException  if an I/O error occurs     */    public List<Path> find( Path searchDir, boolean includeFile, boolean includeDirectory, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        if( notExists( searchDir ) ) return new ArrayList<>();        Path rootDir = isFile( searchDir ) ? searchDir.getParent() : searchDir;        FileFinder finder = new FileFinder( includeFile, includeDirectory, matchingPattern );        scanDepth = ( scanDepth < 0 ) ? Integer.MAX_VALUE : ++scanDepth;        try {        	java.nio.file.Files.walkFileTree( rootDir, EnumSet.noneOf( FileVisitOption.class ), scanDepth, finder );        } catch( IOException e ) {	        throw new UncheckedIOException( e );        }        return finder.getFoundPaths();    }    public List<Path> findFile( String searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, true, false, scanDepth, matchingPattern );    }    public List<Path> findFile( Path searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, true, false, scanDepth, matchingPattern );    }    public List<Path> findDirectory( String searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, false, true, scanDepth, matchingPattern );    }    public List<Path> findDirectory( Path searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, false, true, scanDepth, matchingPattern );    }    public List<Path> findAll( String searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, true, true, scanDepth, matchingPattern );    }    public List<Path> findAll( Path searchDir, int scanDepth, String... matchingPattern ) throws UncheckedIOException {        return find( searchDir, true, true, scanDepth, matchingPattern );    }    public Stream<Path> walk( Path start, FileVisitOption... options ) throws UncheckedIOException {        return walk( start, Integer.MAX_VALUE, options );    }    public Stream<Path> walk( Path start, int scanDepth, FileVisitOption... options ) throws UncheckedIOException {        try {            return java.nio.file.Files.walk( start, scanDepth, options );        } catch ( IOException e ) {            throw new UncheckedIOException( e );        }    }    /**     * check path exists     *     * @param   path    file or directory path     * @param   options options indicating how symbolic links are handled     * @return true if path exists     */    public boolean exists( Path path, LinkOption... options ) {        return path != null && java.nio.file.Files.exists( path, options );    }    /**     * check path exists     *     * @param   path    file or directory path     * @param   options options indicating how symbolic links are handled     * @return true if path exists     */    public boolean exists( String path, LinkOption... options ) {        return exists( toPath( path ), options );    }    /**     * check file exist     * @param   file    file to check     * @param   options options indicating how symbolic links are handled     * @return true if file exists     */    public boolean exists( File file, LinkOption... options ) {        return file != null && exists( file.toPath(), options );    }    /**     * check path exists     *     * @param   path    file or directory path     * @param   options options indicating how symbolic links are handled     * @return true if path exists     */    public boolean notExists( Path path, LinkOption... options ) {        return ! exists( path, options );    }    /**     * check path does not exist     *     * @param path      file or directory path     * @param options   options indicating how symbolic links are handled     * @return true if path does not exist     */    public boolean notExists( String path, LinkOption... options ) {        return ! exists( path, options );    }    /**     * check file does not exist     * @param file      file to check     * @param options   options indicating how symbolic links are handled     * @return true if file does not exist     */    public boolean notExists( File file, LinkOption... options ) {        return ! exists( file, options );    }    private Path toPath( String path ) {        if( path == null ) return null;        try {            return Paths.get( path.trim() );        } catch ( Exception e ) {            return null;        }    }    /**     * check path is file or not     * @param path      file path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is file.     */    public boolean isFile( Path path, LinkOption... options ) {    	return path != null && java.nio.file.Files.isRegularFile( path, options );    }    /**     * check path is file or not     * @param path      file path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is file.     */    public boolean isFile( String path, LinkOption... options ) {        try {            return isFile( toPath(path), options );        } catch( InvalidPathException e ) {            return false;        }    }    /**     * check path is file or not     * @param path      path path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is file.     */    public boolean isFile( File path, LinkOption... options ) {    	return path != null && isFile( path.toPath(), options );    }    /**     * check path is directory or not     * @param path      path path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is directory.     */    public boolean isDirectory( Path path, LinkOption... options ) {    	return path != null && java.nio.file.Files.isDirectory( path, options );    }    /**     * check path is directory or not     * @param path      path path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is directory.     */    public boolean isDirectory( String path, LinkOption... options ) {    	try {            return isDirectory( toPath(path), options );        } catch( InvalidPathException e ) {            return false;        }    }    /**     * check path is directory or not     * @param path      path path to check     * @param options   options indicating how symbolic links are handled     * @return true if path is directory.     */    public boolean isDirectory( File path, LinkOption... options ) {    	return path != null && isDirectory( path.toPath(), options );    }    /**     * Make directory     *     * @param directoryPath directory path     * @return created directory     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeDir( String directoryPath ) throws UncheckedIOException {    	if( directoryPath == null ) return null;    	return makeDir( toPath( directoryPath ) );    }    /**     * Make directory     *     * @param directory directory path     * @return created directory     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeDir( File directory ) throws UncheckedIOException {        if( directory == null ) return null;        return makeDir( directory.toPath() );    }    /**     * Make directory     *     * @param directory directory path     * @return created directory     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeDir( Path directory ) throws UncheckedIOException {    	if( directory == null ) return null;    	if( exists(directory) ) return directory.toFile();    	try {    		return java.nio.file.Files.createDirectories( directory ).toFile();    	} catch( IOException e ) {    		throw new UncheckedIOException( e );    	}    }    /**     * Make file (if directory path is not exists, create it additionally.)     *     * @param filePath file path     * @return created file     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeFile( String filePath ) throws UncheckedIOException {    	return makeFile( toPath(filePath) );    }    /**     * Make file (if directory path is not exists, create it additionally.)     *     * @param filePath file path     * @return created file     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeFile( Path filePath ) throws UncheckedIOException {    	if( filePath == null ) return null;    	if( java.nio.file.Files.exists( filePath ) ) {    		return filePath.toFile();    	} else {    		makeDir( filePath.getParent().toString() );    	}    	try {    		return java.nio.file.Files.createFile( filePath ).toFile();    	} catch( IOException e ) {    		throw new UncheckedIOException( e );    	}    }    /**     * Make file (if directory path is not exists, create it additionally.)     *     * @param file file to create     * @return created file     * @throws UncheckedIOException  if an I/O error occurs     */    public File makeFile( File file ) throws UncheckedIOException {    	if( file == null ) return null;    	return makeFile( file.toPath() );    }    /**     * Move file or directory     *     * @param  source     file or directory path to move     * @param  target     file or directory path of target     * @param  overwrite  overwrite if the target file exists     * @throws UncheckedIOException if an I/O error occurs     */    public void move( String source, String target, boolean overwrite ) throws UncheckedIOException {        move( toPath(source), toPath(target), overwrite );    }    /**     * Move file or directory     *     * @param  source     file or directory path to move     * @param  target     file or directory path of target     * @param  overwrite  overwrite if the target file exists     * @throws UncheckedIOException if an I/O error occurs     */    public void move( Path source, Path target, boolean overwrite ) throws UncheckedIOException {        CopyOption[] option = overwrite                ? new CopyOption[] { StandardCopyOption.REPLACE_EXISTING }                : new CopyOption[] {};        try {            if( java.nio.file.Files.isDirectory(source) ) {                java.nio.file.Files.move( source, target, option );            } else {                if( java.nio.file.Files.isDirectory(target) ) {                    java.nio.file.Files.move( source, target.resolve( source.getFileName() ), option );                } else {                    java.nio.file.Files.move( source, target, option );                }            }        } catch( IOException e ) {            throw new UncheckedIOException( e );        }    }    /**     * Copy file or directory     *     * @param  source     file or directory path to move     * @param  target     file or directory path of target     * @param  overwrite  overwrite if the target file exists     * @throws UncheckedIOException if an I/O error occurs     */    public void copy( String source, String target, boolean overwrite ) throws UncheckedIOException {        copy( toPath(source), toPath(target), overwrite );    }    /**     * Copy file or directory     *     * @param  source     file or directory path to copy     * @param  target     file or directory path of target     * @param  overwrite  overwrite if the target file exists     * @throws UncheckedIOException if an I/O error occurs     */    public void copy( Path source, Path target, boolean overwrite ) throws UncheckedIOException {        CopyOption[] option = overwrite                ? new CopyOption[] { StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING }                : new CopyOption[] { StandardCopyOption.COPY_ATTRIBUTES };        try {            if( isDirectory(source) ) {                for( Path sourcePath : find( source, true, true, -1 ) ) {                    Path targetPath = target.resolve( source.relativize(sourcePath) );                    if( isDirectory( targetPath ) ) {                        makeDir( targetPath );                        continue;                    }                    java.nio.file.Files.copy( sourcePath, targetPath, option );                }            } else {                if( java.nio.file.Files.isDirectory(target) ) {                    java.nio.file.Files.copy( source, target.resolve( source.getFileName() ), option );                } else {                    java.nio.file.Files.copy( source, target, option );                }            }        } catch( IOException e ) {            throw new UncheckedIOException( e );        }    }    /**     * Read serialized objects data stored in file     *     * @param filePath  path of file which store serialized objects data.     * @param <T>       expected class of return     * @return object bean to serialize     * @throws UncheckedClassNotFoundException   if object's class is not defined     * @throws UncheckedIOException     if an I/O error occurs     */    public <T> T readObject( String filePath ) throws UncheckedClassNotFoundException, UncheckedIOException {        try(            InputStream file   = new FileInputStream( filePath );            InputStream buffer = new GZIPInputStream( file );            ObjectInput input  = new ObjectInputStream( buffer )        ) {            Object val = input.readObject();            return val == null ? null : (T) val;        } catch( ClassNotFoundException e ) {            throw new UncheckedClassNotFoundException( e );        } catch( IOException e ) {        	throw new UncheckedIOException( e );        }    }    /**     * Read serialized objects data stored in file     *     * @param file  file stored serialized objects data.     * @param <T>   expected class of return     * @return object bean to serialize     * @throws UncheckedClassNotFoundException   if object's class is not defined     * @throws UncheckedIOException     if an I/O error occurs     */    public <T> T readObject( File file ) throws UncheckedClassNotFoundException, UncheckedIOException {    	return readObject( file.getPath() );    }    /**     * write bean to file     *     * @param filePath  full file path     * @param bean      bean to write     * @throws UncheckedIOException  file I/O exception     */    public void writeObject( String filePath, Object bean ) throws UncheckedIOException {        makeFile( filePath );        try(            OutputStream file   = new FileOutputStream( filePath );            OutputStream buffer = new GZIPOutputStream( file );            ObjectOutput output = new ObjectOutputStream( buffer )        ) {            output.writeObject( bean );            output.flush();        } catch( IOException e ) {            delete( filePath );            throw new UncheckedIOException( e );        } catch ( Exception e ) {            delete( filePath );            throw e;        }    }    /**     * write bean to file     *     * @param file  file     * @param bean  bean to write     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeObject( File file, Object bean ) throws UncheckedIOException {        writeObject( file.getPath(), bean );    }    /**     * remove extension from path     *     * @param path  path     * @return file path which has no extension.     */    public String removeExtension( Path path ) {        if( path == null ) return null;        return removeExtension( path.toString() );    }    /**     * remove extension from path     *     * @param file  file     * @return file path which has no extension.     */    public String removeExtension( File file ) {        if( file == null ) return null;        return removeExtension( file.getPath() );    }    /**     * remove extension from path     *     * @param filePath  file path (or file name)     * @return file path which has no extension.     */    public String removeExtension( String filePath ) {        if( filePath == null ) return null;        int index = filePath.lastIndexOf( '.' );        if( index < 0 ) return filePath;        String ext = filePath.substring( index + 1 );        if( ext.contains(File.pathSeparator) || ext.contains("/") ) return filePath;        return filePath.substring( 0, index );    }    /**     * Read text from file     * @param filePath  file path     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( String filePath ) throws UncheckedIOException {    	return readFrom( toStream(filePath) );    }    /**     * Read text from file     *     * @param filePath  file path     * @param charset   character set (UTF-8, EUC-KR, ... )     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( String filePath, String charset ) throws UncheckedIOException {    	return readFrom( toStream(filePath), charset );    }    /**     * Read text from file     *     * @param file file path     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( File file ) throws UncheckedIOException {        return readFrom( toStream(file), CHARSET_AUTO_DETECT );    }    /**     * Read text from file     *     * @param path file path     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( Path path ) throws UncheckedIOException {        return readFrom( toStream(path), CHARSET_AUTO_DETECT );    }    /**     * Read text from file     *     * @param file      file path     * @param charset   character set (UTF-8, EUC-KR, ... )     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( File file, String charset ) throws UncheckedIOException {    	return readFrom( toStream(file), charset );    }    /**     * Read text from file     *     * @param file      file path     * @param charset   character set (UTF-8, EUC-KR, ... )     * @return text     * @throws UncheckedIOException if I/O error occurs     */    public String readFrom( Path file, String charset ) throws UncheckedIOException {        return readFrom( toStream(file), charset );    }    /**     * Read text from file     *     * <pre>     *   StringBuilder sb = new StringBuilder();     *     *   readFrom( filePath, readLine -&gt; {     *     sb.append( readLine ).append( '\n' );     *   });     *     *   System.out.println( sb );     * </pre>     *     * @param filePath  file path     * @param reader    reader to treat line in text     * @throws UncheckedIOException if I/O error occurs     */    public void readFrom( Path filePath, LineReader reader ) throws UncheckedIOException {        readFrom( toStream(filePath), reader, CHARSET_AUTO_DETECT );    }    /**     * Read text from file     *     * <pre>     *   StringBuilder sb = new StringBuilder();     *     *   readFrom( filePath, readLine -&gt; {     *     sb.append( readLine ).append( '\n' );     *   }, charset );     *     *   System.out.println( sb );     * </pre>     *     * @param filePath  file path     * @param reader    worker to treat line in text     * @param charset   character set (UTF-8, EUC-KR, ... )     * @throws UncheckedIOException if I/O error occurs     */    public void readFrom( Path filePath, LineReader reader, String charset ) throws UncheckedIOException {        readFrom( toStream(filePath), reader, charset );    }    public void readFrom( File filePath, LineReader reader ) throws UncheckedIOException {    	readFrom( toStream(filePath), reader, CHARSET_AUTO_DETECT);    }    public void readFrom( File filePath, LineReader reader, String charset ) throws UncheckedIOException {    	readFrom( toStream(filePath), reader, charset );    }    public void readFrom( String filePath, LineReader reader ) throws UncheckedIOException {        readFrom( toStream(filePath), reader, CHARSET_AUTO_DETECT);    }    public void readFrom( String filePath, LineReader reader, String charset ) throws UncheckedIOException {        readFrom( toStream(filePath), reader, charset );    }    public String readFrom( URL url ) throws UncheckedIOException {        return readFrom( toStream(url) );    }    public String readFrom( URL url, String charset ) throws UncheckedIOException {        return readFrom( toStream(url), charset );    }    public void readFrom( URL url, LineReader reader ) throws UncheckedIOException {        readFrom( toStream(url), reader, CHARSET_AUTO_DETECT );    }    public void readFrom( URL url, LineReader reader, String charset ) throws UncheckedIOException {        readFrom( toStream(url), reader, charset );    }    public InputStream toStream( URL url ) {        if( url == null ) return null;        try {            return url.openStream();        } catch (IOException e) {            throw new UncheckedIOException(e);        }    }    public InputStream toStream( String filePath ) {        if( Strings.isEmpty(filePath) ) return null;        try {            return new FileInputStream( filePath );        } catch ( IOException e ) {            throw new UncheckedIOException(e);        }    }    public InputStream toStream( File filePath ) {        if( filePath == null ) return null;        return toStream( filePath.toString() );    }    public InputStream toStream( Path path ) {        if( path == null ) return null;        return toStream( path.toString() );    }    public String readFrom( InputStream inputStream ) throws UncheckedIOException {        return readFrom( inputStream, CHARSET_AUTO_DETECT );    }    public String readFrom( InputStream inputStream, String charset ) throws UncheckedIOException {        StringBuilder sb = new StringBuilder();        readFrom( inputStream, readLine -> sb.append( readLine ).append( '\n' ), charset );        return sb.toString();    }    public void readFrom( InputStream inputStream, LineReader reader ) throws UncheckedIOException {        readFrom( inputStream, reader, null );    }    public void readFrom( InputStream inputStream, LineReader reader, String charset ) throws UncheckedIOException {        if( inputStream == null ) return;        BufferedInputStream mis = new BufferedInputStream( inputStream );        if( Strings.isEmpty(charset) ) {            charset = getCharset( mis );        }        try(            BufferedReader br = new BufferedReader( new InputStreamReader(mis, charset) )        ) {            String line;            while( ( line = br.readLine() ) != null ) {                reader.read( line );            }        } catch( IOException e ) {            throw new UncheckedIOException(e);        } finally {            if( mis != null ) try { mis.close(); } catch( IOException e ) {}        }    }    public void readResourceFrom( URL url, LineReader reader ) {        readResourceFrom( url, reader, null );    }    public void readResourceFrom( String path, LineReader reader ) {        readResourceFrom( Classes.getResource(path), reader );    }    public void readResourceFrom( URL url, LineReader reader, String charset ) {        InputStream inputStream = Classes.getResourceStream( url );        if( inputStream != null ) {            readFrom( inputStream, reader, charset );        }    }    public void readResourceFrom( String path, LineReader reader, String charset ) {        readResourceFrom( Classes.getResource(path), reader, charset );    }    public String readResourceFrom( URL url ) {        return readResourceFrom( url, "" );    }    public String readResourceFrom( String path ) {        return readResourceFrom( Classes.getResource(path), "" );    }    public String readResourceFrom( URL url, String charset ) {        StringBuilder sb = new StringBuilder();        readResourceFrom( url, readLine -> sb.append( readLine ).append( '\n' ), charset );        return sb.toString();    }    public String readResourceFrom( String path, String charset ) {        return readResourceFrom( Classes.getResource(path), charset );    }    public boolean isResourceExists( String resourcePath ) {        return Classes.getResource( resourcePath ) != null;    }    public InputStream getResourceAsStream( String resourcePath ) {        return Classes.getResourceStream( resourcePath );    }    public InputStream getResourceAsStream( URL url ) {        return Classes.getResourceStream( url );    }    /**     * Write text to file     *     * <pre>     *  writeTo( filePath, writer -&gt; {     *    writer.write( text );     *  }, "EUC-KR" );     * </pre>     *     * @param filePath  file path to write text     * @param writer    writer to write buffer     * @param charset   encoding character set     * @throws UncheckedIOException if an I/O exception occurs     */    public void writeTo( String filePath, BufferWriter writer, String charset ) throws UncheckedIOException {        makeFile( filePath );        try(            FileOutputStream fos    = new FileOutputStream( filePath );            BufferedWriter   buffer = new BufferedWriter( new OutputStreamWriter( fos, charset ) )        ) {            writer.write( buffer );        } catch( IOException e ) {            throw new UncheckedIOException(e);        }    }    /**     * Write text to file (encoding character set is "UTF-8")     *     * <pre>     *  writeTo( filePath, writer -&gt; {     *    writer.write( text );     *  });     * </pre>     *     * @param filePath  file path to write text     * @param writer   writer to write line     * @throws UncheckedIOException if an I/O exception occurs     */    public void writeTo( String filePath, BufferWriter writer ) throws UncheckedIOException {        writeTo( filePath, writer, UTF_8 );    }    /**     * Write text to file     *     * @param filePath  file full path     * @param text      text to write     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeTo( String filePath, final String text ) throws UncheckedIOException {        writeTo( filePath, text, UTF_8 );    }    /**     * Write text to file     *     * @param filePath  file full path     * @param text      text to write     * @param charset   encoding character set     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeTo( String filePath, final String text, String charset ) throws UncheckedIOException {        writeTo( filePath, writer -> { writer.write( text ); }, charset );    }    /**     * Write text to file     *     * @param file  file     * @param text  text to write     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeTo( File file, final String text ) throws UncheckedIOException {    	writeTo( file.getAbsolutePath(), text );    }    /**     * Write binary data to file     *     * @param file  file to write     * @param binary binary data to write     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeTo( String file, byte[] binary ) throws UncheckedIOException {    	makeFile( file );    	FileOutputStream stream = null;    	try {    		stream = new FileOutputStream( file );    	    stream.write( binary );    	} catch( IOException e ) {	        throw new UncheckedIOException(e);        } finally {    	    if( stream != null ) try { stream.close(); } catch( IOException e ) {}    	}    }    /**     * Write binary data to file     *     * @param path   file path to write     * @param binary binary data to write     * @throws UncheckedIOException  if an I/O error occurs     */    public void writeTo( Path path, byte[] binary ) throws UncheckedIOException {        writeTo( path.toString(), binary );    }    /**     * Write data as CSV file     *     * @param file      file to write     * @param data      data represents excel sheet     * @param delimiter delimiter to seperate data     * @param charset   character set     * @throws UncheckedIOException if an I/O exception occurs     */    public void writeCsvTo( String file, List data, String delimiter, String charset ) throws UncheckedIOException {        writeCsvTo( file, new NList( data ), delimiter, charset );    }    /**     * Write data as CSV file     *     * @param file      file to write     * @param data      data represents excel sheet     * @param delimiter delimiter to seperate data     * @param charset   character set     * @throws UncheckedIOException if an I/O exception occurs     */    public void writeCsvTo( String file, NList data, String delimiter, String charset ) throws UncheckedIOException {    	writeTo( file, writer -> {            writer.write( Strings.join( data.getAliases(), delimiter ) );            writer.write( '\n' );            for( int row = 0, rowCnt = data.size(); row < rowCnt; row++ ) {                List<String> temp = new ArrayList<>();                for( int col = 0, colCnt = data.keySize(); col < colCnt; col++ ) {                    temp.add( Strings.nvl( data.get( col, row ) ) );                }                writer.write( Strings.join( temp, delimiter ) );                writer.write( '\n' );            }        }, charset );    }    /**     * Convert relative path to absolute path     *     * <pre>     * Files.toAbsolutePath( "/home/user/nayasis", "../test/abc" );     *     * → "/home/user/test/abc"     * </pre>     *     * @param basePath   bast path     * @param targetPath target path to convert     * @return absolute path     * @throws UncheckedIOException base path is not existed     */    public String toAbsolutePath( String basePath, String targetPath ) throws UncheckedIOException {    	Path pathBase = getDirectory( Paths.get(basePath) );    	return normalizeSeparator( pathBase.resolve( targetPath ).normalize().toString() );    }    /**     * Convert absolute path to relative path     *     * <pre>     * Files.toRelativePath( "/home/user/nayasis", "/home/user/test/abc" );     *     * → "../test/abc"     * </pre>     *     * @param basePath   base path     * @param targetPath target path to convert     * @return relative path     * @throws UncheckedIOException    base path is not existed     */    public String toRelativePath( String basePath, String targetPath ) throws UncheckedIOException {    	Path pathBase = getDirectory( Paths.get(basePath) );    	return normalizeSeparator( pathBase.relativize( Paths.get( targetPath ) ).toString() );    }    /**     * get current directory     *     * @param path File or Directory     * @return return parent directory if path is file, return itself it path is directory.     * @throws UncheckedIOException path is not invalid     */    public File getDirectory( String path ) throws UncheckedIOException {        return getDirectory( Paths.get(path) ).toFile();    }    /**     * get current directory     *     * @param path File or Directory     * @return return parent directory if path is file, return itself it path is directory.     * @throws UncheckedIOException path is not invalid     */    public File getDirectory( File path ) throws UncheckedIOException {        return getDirectory( path.toPath() ).toFile();    }    /**     * get current directory     *     * @param path File or Directory     * @return return parent directory if path is file, return itself it path is directory.     * @throws UncheckedIOException path is not invalid     */    public Path getDirectory( Path path ) throws UncheckedIOException {        return isDirectory(path) ? path : path.getParent();    }    /**     * Zip file or directory     *     * @param fileOrDirectoryToZip file or directory to zip     * @param targetFile archive file     * @param charset character set (default : UTF-8)     */    public void zip( File fileOrDirectoryToZip, File targetFile, Charset charset ) {        getZipFileHandler().zip( fileOrDirectoryToZip, targetFile, charset );    }    /**     * Zip file or directory     *     * @param fileOrDirectoryToZip file or directory to zip     * @param targetFile archive file     */    public void zip( File fileOrDirectoryToZip, File targetFile ) {        zip( fileOrDirectoryToZip, targetFile, Charset.defaultCharset() );    }    /**     * Zip file or directory     *     * @param fileOrDirectoryToZip file or directory to zip     * @param targetFile archive file     * @param charset character set (default : UTF-8)     */    public void zip( Path fileOrDirectoryToZip, Path targetFile, Charset charset ) {        zip( fileOrDirectoryToZip.toFile(), targetFile.toFile(), charset );    }    /**     * Zip file or directory     *     * @param fileOrDirectoryToZip file or directory to zip     * @param targetFile archive file     */    public void zip( Path fileOrDirectoryToZip, Path targetFile ) {        zip( fileOrDirectoryToZip.toFile(), targetFile.toFile() );    }    /**     * Unzip file or directory     *     * @param fileToUnzip file to unzip     * @param targetDirectory directory to unzip     * @param charset character set (default : UTF-8)     */    public void unzip( File fileToUnzip, File targetDirectory, Charset charset ) {        getZipFileHandler().unzip( fileToUnzip, targetDirectory, charset );    }    /**     * Unzip file or directory     *     * @param fileToUnzip file to unzip     * @param targetDirectory directory to unzip     */    public void unzip( File fileToUnzip, File targetDirectory ) {        unzip( fileToUnzip, targetDirectory, Charset.defaultCharset() );    }    /**     * Unzip file or directory     *     * @param fileToUnzip file to unzip     * @param targetDirectory directory to unzip     * @param charset character set (default : UTF-8)     */    public void unzip( Path fileToUnzip, Path targetDirectory, Charset charset ) {        unzip( fileToUnzip.toFile(), targetDirectory.toFile(), charset );    }    /**     * Unzip file or directory     *     * @param fileToUnzip file to unzip     * @param targetDirectory directory to unzip     */    public void unzip( Path fileToUnzip, Path targetDirectory ) {        unzip( fileToUnzip.toFile(), targetDirectory.toFile() );    }    private ZipFileHandler getZipFileHandler() {        try {            return new ZipFileHandler();        } catch( Throwable e ) {            String errorMessage =                "you must import [Apache Common Compress Library] to handle zip file.\n" +                        "\t- Maven dependency is like below.\n" +                        "\t\t<dependency>\n" +                        "\t\t  <groupId>org.apache.commons</groupId>\n" +                        "\t\t  <artifactId>commons-compress</artifactId>\n" +                        "\t\t  <version>1.18</version>\n" +                        "\t\t</dependency>\n";            throw new NoClassDefFoundError( errorMessage );        }    }    /**     * Resolve path with base path     *     * <pre>     *   Files.getPath( "/root/bin", ".././temp" ); -&gt; "/root/temp"     *   Files.getPath( "/root/bin", "/./temp" );   -&gt; "/root/bin/temp"     *   Files.getPath( "/root/bin", "temp" );      -&gt; "/root/bin/temp     * </pre>     *     * @param basePath      base path     * @param resolvedPath  path to resolve with base path     * @return resolved path     */    public String resolvePath( String basePath, String resolvedPath ) {        List<String> pathList = Strings.tokenize( normalizeSeparator( basePath ), "/" );        List<String> children = Strings.tokenize( normalizeSeparator( resolvedPath ), "/" );        pathList.addAll( children );        for( int i = 0, iCnt = pathList.size(); i < iCnt; i++ ) {            String path = pathList.get( i );            if( "".equals(path) || ".".equals(path) ) {                pathList.remove( i );                iCnt--;            } else if( "..".equals( path ) ) {                pathList.remove( i );                iCnt--;                if( i > 0 && pathList.size() > 1 ) {                    pathList.remove( i - 1 );                    iCnt--;                }            }        }        return Strings.join( pathList, "/" );    }    /**     * read file attributes     *     * @param filePath  file path     * @return basic attributes     * @throws UncheckedIOException occurs when raise file I/O errir     */    public BasicFileAttributes readAttribute( Path filePath ) throws UncheckedIOException {        try {            return java.nio.file.Files.readAttributes( filePath, BasicFileAttributes.class );        } catch( IOException e ) {            throw new UncheckedIOException( e );        }    }    /**     * read file attributes     *     * @param filePath  file path     * @return basic attributes     * @throws UncheckedIOException occurs when raise file I/O errir     */    public BasicFileAttributes readAttribute( String filePath ) throws UncheckedIOException {        return readAttribute( Paths.get( filePath ) );    }    /**     * get user home directory path     *     * @return user home path     */    public String getUserHome() {        return normalizeSeparator( System.getProperty("user.home") );    }    /**     * get root directory where program is running     *     * @return root directory     */    public String getRootPath() {        return normalizeSeparator( Paths.get("").toAbsolutePath() );    }    /**     * get root directory where given class is running     *     * @param klass given class to detect root path     * @return root directory     */    public String getRootPath( Class klass ) {        URL location = Classes.getRootLocation( klass );        return new File( location.getFile() ).getAbsolutePath();    }    /**     * detect file's character set     *     * @param filePath  file path     * @return  detected character set (UTF-8, EUC-KR, EUC-JP, ... )     */    public String getCharset( String filePath ) throws UncheckedFileNotFoundException, UncheckedIOException {        FileInputStream inputStream;        try {            inputStream = new FileInputStream( filePath );        } catch ( FileNotFoundException e ) {            throw new UncheckedFileNotFoundException( e );        }        try {            return getCharset( new BufferedInputStream(inputStream) );        } catch ( UncheckedIOException e ) {            throw e;        } finally {            if( inputStream != null ) try { inputStream.close(); } catch( IOException e ) {}        }    }    /**     * detect file's character set     *     * @param inputStream  input stream     * @return  detected character set (UTF-8, EUC-KR, EUC-JP, ... )     */    public String getCharset( InputStream inputStream ) throws UncheckedIOException {        byte[] buf = new byte[4096];        UniversalDetector detector = null;        try {            inputStream.mark( 1 << 24 );            detector = new UniversalDetector( null );            int nread;            while ( (nread = inputStream.read(buf)) > 0 && ! detector.isDone() ) {                detector.handleData( buf, 0, nread );            }            detector.dataEnd();            String charset = detector.getDetectedCharset();            return charset == null ? "UTF-8" : charset;        } catch( IOException e ) {            throw new UncheckedIOException( e );        } finally {            if( detector    != null ) try { detector.reset(); } catch( Exception e ) {}            if( inputStream != null ) try {                inputStream.reset();            } catch( IOException e ) {}        }    }    public boolean isHidden( Path path ) throws UncheckedIOException {        try {            return path != null && java.nio.file.Files.isHidden( path );        } catch ( IOException e ) {            throw new UncheckedIOException(e);        }    }    public boolean isReadable( Path path ) {        return path != null && java.nio.file.Files.isReadable( path );    }    public boolean isWritable( Path path ) {        return path != null && java.nio.file.Files.isWritable( path );    }    public boolean isExecutable( Path path ) {        return path != null && java.nio.file.Files.isExecutable( path );    }    public boolean isSymbolicLink( Path path ) {        return path != null && java.nio.file.Files.isSymbolicLink( path );    }    public URL toURL( Path path ) throws UncheckedMalformedUrlException {        if( path == null ) return null;        try {            return path.toUri().toURL();        } catch ( MalformedURLException e ) {            throw new UncheckedMalformedUrlException(e);        }    }    public URL toURL( String path ) throws UncheckedMalformedUrlException {        if( Strings.isEmpty(path) ) return null;        return toURL( Paths.get(path) );    }}